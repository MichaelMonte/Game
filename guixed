import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;


public class FinalProject {
	
	static ArrayList<Player> players = new ArrayList<>();
	static Scanner input = new Scanner(System.in);
	
	public static void main(String[] args) 
	{
		/*JFrame frame = new GUI();
		frame.setTitle("Survivor");
		frame.setSize(720, 525);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);*/
		
		AddPlayers();
		verifyNumberOfPlayers();
		
		while (true)
		{
			for(Player x: players)
			{
				if(x.isAlive(x.getHealth()))//TODO Loop until one man stands 
				{
					System.out.println(" ");
					System.out.print("Name: ");         System.out.println(x.getName());
					System.out.print("Health: ");       System.out.println(x.getHealth());
					System.out.print("Condition: ");    System.out.println(x.getCondition());///TODO Remove 3
					System.out.println(" ");
					System.out.printf("%s, who would you like to attack ===> ", x.getName());
					String opponent = String.valueOf(input.nextLine());
					for(Player a: players)
					{
						while((a.getName().equalsIgnoreCase(opponent)))
						{
							if(a.getName().equalsIgnoreCase(opponent) && !(x.getName().equalsIgnoreCase(opponent)))
							{
								System.out.println(" ");
								//System.out.printf("you would like to attack %s?", a.getName());
								System.out.println(" ");
								x.attack(a);
							}	
							else if(x.getName().equalsIgnoreCase(opponent))
							{
								System.out.println(" ");
								System.out.println("You cant attack yourself");
							}
							break;
						}
					}
				}
				else
				{	
					System.out.println(" ");
					System.out.printf("Sorry %s, You are dead \n", x.getName());
				}
			}
		}
		
	
	}
	public static void AddPlayers()
	{
		System.out.print("How many players playing today ===> ");
		int numberOfPlayers = Integer.valueOf(input.nextLine());//TODO Validate User input (Only numbers)
		for(int i = 0; numberOfPlayers>i; i++)
		{
			System.out.println("please enter player name ===> ");
			String person = String.valueOf(input.nextLine());
			players.add(new Player(person));
		}
	}
	public static void verifyNumberOfPlayers()
	{
		boolean stop = false;
		while(stop);	
		{
			System.out.println("These are your current players: ");
			System.out.println("--------------------------------");
			System.out.println(" ");
			for(Player n: players)
			{
				System.out.println(n.getName());
			}
			System.out.println(" ");
			System.out.println("--------------------------------");
			System.out.println("Do you want to add more players? (Y/N) ");		
			String addMore = String.valueOf(input.nextLine());//TODO Validate String 
			if(addMore.equalsIgnoreCase("y") || addMore.equalsIgnoreCase("yes"))
			{
				AddPlayers();	
				verifyNumberOfPlayers();
			}
			else if(addMore.equalsIgnoreCase("n") || addMore.equalsIgnoreCase("no"))
			{
				stop = true;
			}
			else
			{
				System.out.println("Please enter Yes or No");
			}
		}	
	}
	
}
/*class GUI extends JFrame implements ActionListener 
{
	
	JLabel heading,instructions,playerName,prompt,hitMissMessage;
	JPanel mainPnl,instuctionsPnl1,namePnl,instructionsPnl2,messagePnl,textfieldPnl,headingPnl;
	JTextField attack;
	JButton attackButton;
	
	public GUI() {
	
		mainPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));
		mainPnl.setBorder(BorderFactory.createEmptyBorder(30,30,30,30)); 
		mainPnl.setBackground(Color.RED);
		
		headingPnl = new JPanel();
		headingPnl.setPreferredSize(new Dimension(690, 60));
		
		instuctionsPnl1 = new JPanel();
		instuctionsPnl1.setPreferredSize(new Dimension(690, 120));
		
		instructionsPnl2 = new JPanel();
		instructionsPnl2.setPreferredSize(new Dimension(690, 60));
		
		textfieldPnl = new JPanel();
		textfieldPnl.setPreferredSize(new Dimension(690, 50));
		
		namePnl = new JPanel(new FlowLayout(FlowLayout.LEFT));
		namePnl.setPreferredSize(new Dimension(690, 80));
		
		
		messagePnl = new JPanel();
		messagePnl.setPreferredSize(new Dimension(690, 50));
	  	
	
	
		//Making a main panel and then add the small components to the main panel
		add(mainPnl,BorderLayout.CENTER);
		mainPnl.add(headingPnl);
		mainPnl.add(instuctionsPnl1);
		mainPnl.add(namePnl);
		mainPnl.add(instructionsPnl2);
		mainPnl.add(textfieldPnl);
		mainPnl.add(messagePnl);
		
		
		heading = new JLabel("Survivor");
		heading.setFont(new Font("Arial", Font.BOLD, 36));
		
		instructions = new JLabel("This is a turn based game "); 
		instructions.setFont(new Font("Arial", Font.BOLD, 18));
		
		playerName = new JLabel();
		playerName.setFont(new Font("Arial", Font.BOLD, 18));
		playerName.setHorizontalAlignment(JLabel.LEFT);
		
		prompt = new JLabel("who you want to attack?");
		prompt.setFont(new Font("Arial", Font.BOLD, 18));
		        
		hitMissMessage = new JLabel("hit/miss");
		hitMissMessage.setFont(new Font("Arial", Font.BOLD, 18));
		              
		attack = new JTextField(10);
		attack.setFont(new Font("Arial", Font.BOLD, 18));
		        
		attackButton = new JButton("Attack");
		attackButton.setFont(new Font("Arial", Font.BOLD, 22));
		        
		
		headingPnl.add(heading);
		instuctionsPnl1.add(instructions);
		namePnl.add(playerName);
		instructionsPnl2.add(prompt);
		textfieldPnl.add(attack);
		textfieldPnl.add(attackButton);
		messagePnl.add(hitMissMessage);
		
		attackButton.addActionListener(this);
		
	}
	
	public void actionPerformed(ActionEvent e) {
		
		if(e.getSource().equals(attackButton))
		{
			hitMissMessage.setText("Hit");
		}
		
	}
*/
	
	

